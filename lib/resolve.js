// Generated by CoffeeScript 2.7.0
(function() {
  var Module, basename, dirname, extname, invalidDirs, isAbsolute, join, modulePaths, modulerize, repl, resolve, sep,
    indexOf = [].indexOf;

  Module = require('module');

  ({join, extname, dirname, basename, resolve, sep} = require('path'));

  isAbsolute = function(path) {
    return /^\//.test(path);
  };

  // Normalize paths and remove extensions
  // to create valid CommonJS module names
  modulerize = function(id, filename = id) {
    var baseName, dirName, ext, modName;
    ext = extname(filename);
    dirName = dirname(id);
    baseName = basename(id, ext);
    // Do not allow names like 'underscore/underscore'
    if (dirName === baseName) {
      modName = baseName;
    } else {
      modName = join(dirname(id), basename(id, ext));
    }
    // deal with window path separator
    return modName.replace(/\\/g, '/');
  };

  modulePaths = Module._nodeModulePaths(process.cwd());

  invalidDirs = ['/', '.'];

  repl = {
    id: 'repl',
    filename: join(process.cwd(), 'repl'),
    paths: modulePaths
  };

  // Resolves a `require()` call. Pass in the name of the module where
  // the call was made, and the path that was required.
  // Returns an array of: [moduleName, scriptPath]
  module.exports = function(request, parent = repl) {
    var dir, filename, id, index, paths;
    paths = Module._resolveLookupPaths(request, parent);
    filename = Module._findPath(request, paths);
    if (!filename) {
      throw new Error(`Cannot find module: ${request}. Have you run \`npm install .\` ?`);
    }
    
    // Find package root relative to localModules folder
    dir = filename;
    while (indexOf.call(invalidDirs, dir) < 0 && indexOf.call(modulePaths, dir) < 0) {
      dir = dirname(dir);
    }
    // make sure we have a valid directory path
    if (indexOf.call(invalidDirs, dir) >= 0) {
      // possibly a linked module?
      index = filename.lastIndexOf(`${sep}${request}`);
      if (index > 0) {
        dir = filename.substring(0, index);
        modulePaths.push(dir);
      } else {
        throw new Error(`Load path not found for ${filename}`);
      }
    }
    // create the id/scriptPath array
    id = filename.replace(`${dir}${sep}`, '');
    return [modulerize(id, filename), filename];
  };

  module.exports.paths = function(filename) {
    return Module._nodeModulePaths(dirname(filename));
  };

  module.exports.modulerize = modulerize;

}).call(this);
