// Generated by CoffeeScript 2.7.0
(function() {
  var Dependency, Module, compilers, detective, extname, fs, mtime, resolve,
    indexOf = [].indexOf;

  ({extname} = require('path'));

  fs = require('fs');

  detective = require('fast-detective');

  resolve = require('./resolve');

  compilers = require('./compilers');

  mtime = function(path) {
    return fs.statSync(path).mtime.valueOf();
  };

  Module = (function() {
    class Module {
      constructor(request, parent) {
        [this.id, this.filename] = resolve(request, parent);
        this.ext = extname(this.filename).slice(1);
        this.mtime = mtime(this.filename);
        this.paths = resolve.paths(this.filename);
      }

      compile() {
        if (!this._compile || this.changed()) {
          this.mtime = mtime(this.filename);
          this._compile = compilers[this.ext](this.filename);
        }
        return this._compile;
      }

      modules() {
        if (!this._modules || this.changed()) {
          this._modules = this.resolve();
        }
        return this._modules;
      }

      changed() {
        return this.mtime !== mtime(this.filename);
      }

      resolve() {
        var i, len, path, ref, results;
        ref = this.calls();
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          path = ref[i];
          results.push(new this.constructor(path, this));
        }
        return results;
      }

      
        // Find calls to require()
      calls() {
        var ref;
        if (ref = this.ext, indexOf.call(this.constructor.walk, ref) >= 0) {
          return detective(this.compile());
        } else {
          return [];
        }
      }

    };

    Module.walk = ['js', 'coffee'];

    return Module;

  }).call(this);

  Dependency = class Dependency {
    constructor(paths = []) {
      this.paths = paths;
    }

    resolve() {
      var path;
      this.modules || (this.modules = (function() {
        var i, len, ref, results;
        ref = this.paths;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          path = ref[i];
          results.push(new Module(path));
        }
        return results;
      }).call(this));
      return this.deepResolve(this.modules);
    }

    // Private
    deepResolve(modules = [], result = [], search = {}) {
      var i, len, module;
      for (i = 0, len = modules.length; i < len; i++) {
        module = modules[i];
        if (!(!search[module.filename])) {
          continue;
        }
        search[module.filename] = true;
        result.push(module);
        this.deepResolve(module.modules(), result, search);
      }
      return result;
    }

  };

  module.exports = Dependency;

  module.exports.Module = Module;

}).call(this);
