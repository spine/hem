// Generated by CoffeeScript 2.7.0
(function() {
  var BuildVersion, NpmPackageVersion, fs, log, path, types, updateVersionInAppFiles, updateVersionInData, utils;

  fs = require('fs');

  path = require('path');

  utils = require('./utils');

  log = require('./log');

  types = {};

  // private functions
  updateVersionInAppFiles = function(files, packages, value) {
    var data, file, i, key, len, pkg, results;
    results = [];
    for (i = 0, len = files.length; i < len; i++) {
      file = files[i];
      log(`- updating file <yellow>${file}</yellow> with version: <b>${value}</b>`);
      data = fs.readFileSync(file, 'utf8');
// match all target in packages
      for (key in packages) {
        pkg = packages[key];
        data = updateVersionInData(data, value, pkg);
      }
      results.push(fs.writeFileSync(file, data));
    }
    return results;
  };

  updateVersionInData = function(data, value, pkg) {
    var ext, match, name, replace;
    ext = path.extname(pkg.target);
    name = path.basename(pkg.target, ext);
    match = new RegExp(`=(\"|')(.*/?)${name}[^\"']?${ext}(\"|')`);
    replace = `=$1$2${name}.${value}${ext}$3`;
    // perform replace
    if (data.match(match)) {
      log(`> found target: ${pkg.target}`);
      return data.replace(match, replace);
    } else {
      return data;
    }
  };

  // handle versioning based on package.json version (default)
  types.package = NpmPackageVersion = class NpmPackageVersion {
    constructor(app, options = {}) {
      this.app = app;
      this.files = utils.toArray(options.files).map((file) => {
        return this.app.applyRootDir(file)[0];
      });
    }

    getVersion() {
      return JSON.parse(fs.readFileSync('./package.json', 'utf8')).version;
    }

    update() {
      return updateVersionInAppFiles(this.files, this.app.packages, this.getVersion());
    }

    trim(url) {
      return url.replace(/^([^.]+).*(\.css|\.js)$/i, "$1$2");
    }

  };

  types.build = BuildVersion = class BuildVersion {
    constructor(app, options = {}) {
      this.app = app;
      this.files = utils.toArray(options.files).map((file) => {
        return this.app.applyRootDir(file)[0];
      });
      this.envVariable = options.envVariable || "BUILD_NUMBER";
    }

    getVersion() {
      if (process.env[this.envVariable]) {
        return process.env[this.envVariable];
      } else {
        log(`ERROR: ${this.envVariable} not set correctly as an environment variable.`);
        return process.exit(1);
      }
    }

    update() {
      return updateVersionInAppFiles(this.files, this.app.packages, this.getVersion());
    }

    trim(url) {
      return url.replace(/^([^.]+).*(\.css|\.js)$/i, "$1$2");
    }

  };

  // TODO: other types that could be made
  // 1) based on git commits/tags
  // 2) backed on jenkinds builds or env values
  // 3) Allow build/version to happen with one command (deploy)
  module.exports = types;

}).call(this);
