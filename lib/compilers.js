// Generated by CoffeeScript 1.5.0
(function() {
  var compilers, cs, dirname, eco, fs, jade, stylus,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  dirname = require('path').dirname;

  compilers = {};

  compilers.js = compilers.css = function(path) {
    return fs.readFileSync(path, 'utf8');
  };

  require.extensions['.css'] = function(module, filename) {
    var source;
    source = JSON.stringify(compilers.css(filename));
    return module._compile("module.exports = " + source, filename);
  };

  try {
    cs = require('coffee-script');
    compilers.coffee = function(path) {
      return cs.compile(fs.readFileSync(path, 'utf8'), {
        filename: path
      });
    };
    compilers.litcoffee = function(path) {
      return cs.compile(fs.readFileSync(path, 'utf8'), {
        filename: path,
        literate: true
      });
    };
  } catch (err) {

  }

  eco = require('eco');

  compilers.eco = function(path) {
    var content;
    content = eco.precompile(fs.readFileSync(path, 'utf8'));
    return "module.exports = " + content;
  };

  compilers.jeco = function(path) {
    var content;
    content = eco.precompile(fs.readFileSync(path, 'utf8'));
    return "module.exports = function(values, data){ \n  var $  = jQuery, result = $();\n  values = $.makeArray(values);\n  data = data || {};\n  for(var i=0; i < values.length; i++) {\n    var value = $.extend({}, values[i], data, {index: i});\n    var elem  = $((" + content + ")(value));\n    elem.data('item', value);\n    $.merge(result, elem);\n  }\n  return result;\n};";
  };

  require.extensions['.jeco'] = require.extensions['.eco'];

  compilers.html = function(path) {
    var content;
    content = fs.readFileSync(path, 'utf8');
    return "module.exports = " + (JSON.stringify(content)) + ";\n";
  };

  require.extensions['.html'] = function(module, filename) {
    return module._compile(compilers.html(filename), filename);
  };

  try {
    jade = require('jade');
    compilers.jade = function(path) {
      var content, source, template;
      content = fs.readFileSync(path, 'utf8');
      try {
        template = jade.compile(content, {
          filename: path,
          compileDebug: (__indexOf.call(process.argv, '-d') >= 0) || (__indexOf.call(process.argv, '--debug') >= 0),
          client: true
        });
        source = template.toString();
        return "module.exports = " + source + ";";
      } catch (ex) {
        throw new Error("" + ex + " in " + path);
      }
    };
    require.extensions['.jade'] = function(module, filename) {
      return module._compile(compilers.jade(filename), filename);
    };
  } catch (err) {

  }

  try {
    stylus = require('stylus');
    compilers.styl = function(path) {
      var content, result;
      content = fs.readFileSync(path, 'utf8');
      result = '';
      stylus(content).include(dirname(path)).set('include css', (__indexOf.call(process.argv, '--includeCss') >= 0)).set('compress', !(__indexOf.call(process.argv, '-d') >= 0) && !(__indexOf.call(process.argv, '--debug') >= 0)).render(function(err, css) {
        if (err) {
          throw err;
        }
        return result = css;
      });
      return result;
    };
    require.extensions['.styl'] = function(module, filename) {
      var source;
      source = JSON.stringify(compilers.styl(filename));
      return module._compile("module.exports = " + source, filename);
    };
  } catch (err) {

  }

  module.exports = compilers;

}).call(this);
