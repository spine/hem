// Generated by CoffeeScript 2.7.0
(function() {
  var async, createKarmaFileList, events, fs, log, path, phantom, run, runBrowser, runKarma, utils,
    indexOf = [].indexOf;

  fs = require('fs');

  path = require('path');

  log = require('./log');

  utils = require('./utils');

  events = require('./events');

  phantom = require('./phantom');

  async = require('async');

  // ------- Public Functions
  run = function(apps, options) {
    var runTests;
    // determine runner
    switch (options.runner) {
      case "karma":
        runTests = runKarma;
        break;
      case "browser":
        runTests = runBrowser;
        break;
      default:
        log.errorAndExit(`Invalid or unset test runner value: <yellow>${options.runner}</yellow>`);
    }
    // loop over apps and run tests for each target app
    return runTests(apps, options);
  };

  // TODO: thoughts...
  // 3) need some way to set pre/post test javascript into specs file for both phantom/karma
  // 4) pass in argument to only require certain specs to run!! goes with #3
  // 5) use karma server once, and karma run after that, use our own watch to trigger run or
  //    run tests from multiple projects

  // ------- Test Functions
  runBrowser = function(apps, options, done) {
    var app, i, len, open, q, tasks, testFile, testName;
    open = require("open");
    tasks = {};
// loop over target apps
    for (i = 0, len = apps.length; i < len; i++) {
      app = apps[i];
      testName = app.name;
      testFile = app.getTestPackage().getTestIndexFile();
      tasks[testName] = (function(testFile) {
        return function(done) {
          open(testFile);
          return done();
        };
      })(testFile);
    }
    // if single run then just add to async series
    if (options.singleRun) {
      return async.series(tasks);
    } else {
      // TODO: watch should refresh the current tabl, not re-open
      q = async.queue((function(task, callback) {
        return task(callback);
      }), 1);
      return events.on("watch", function(app, pkg, file) {
        return q.push(tasks[app.name]);
      });
    }
  };

  runKarma = function(apps, options = {}) {
    var app, i, karma, len, q, tasks, testConfig;
    // TODO: require karma from project folder instead!
    karma = require('karma').Server;
    tasks = {};
    // handle defaults
    options.reporters || (options.reporters = 'progress');
    options.frameworks || (options.frameworks = 'jasmine');
    options.browsers || (options.browsers = 'PhantomJS');
    // make sure some values are arrays
    options.reporters = Array.isArray(options.reporters) || options.reporters.split(/[ ,]+/);
    options.frameworks = Array.isArray(options.frameworks) || options.frameworks.split(/[ ,]+/);
    options.browsers = Array.isArray(options.browsers) || options.browsers.split(/[ ,]+/);
    for (i = 0, len = apps.length; i < len; i++) {
      app = apps[i];
      // create config file to pass into server if user doesn't supply a file to use
      testConfig = {
        singleRun: true,
        autoWatch: false,
        basePath: options.basePath,
        logLevel: options.logLevel || 'error',
        reporters: options.reporters,
        frameworks: options.frameworks,
        browsers: options.browsers,
        preprocessors: options.preprocessors || null
      };
      // set files to test
      testConfig.files = createKarmaFileList(app);
      // coverage reporter option
      testConfig.coverageReporter = options.coverageReporter || null;
      // handle junit special case for report file location
      if (indexOf.call(testConfig.reporters, 'junit') >= 0) {
        testConfig.junitReporter = {
          outputFile: app.name + '-test-results.xml',
          suite: app.name,
          outputDir: '.',
          useBrowserName: false
        };
      }
      // create task
      tasks[app.name] = (function(app, testConfig) {
        return function(done) {
          var callback, server;
          log(`Testing application targets: <green>${app.name}</green>`);
          // karma callback
          callback = function(exitCode) {
            // async.series calleback
            return done(null, {
              failed: exitCode
            });
          };
          // start karma server
          server = new karma(testConfig, callback);
          return server.start();
        };
      })(app, testConfig);
    }
    // if single run then just add to async series
    if (options.singleRun) {
      return async.series(tasks, function(err, results) {
        var exitCode, name, result;
        exitCode = 0;
        for (name in results) {
          result = results[name];
          exitCode += result.failed && result.failed || 0;
          exitCode += result.error && 1 || 0;
        }
        return process.exit(exitCode);
      });
    } else {
      // else add to queue and setup watch
      q = async.queue((function(task, callback) {
        return task(callback);
      }), 1);
      return events.on("watch", function(app, pkg, file) {
        return q.push(tasks[app.name]);
      });
    }
  };

  createKarmaFileList = function(app) {
    var files, i, len, ref, target;
    files = [];
    ref = app.getTestPackage().getAllTestTargets(false);
    for (i = 0, len = ref.length; i < len; i++) {
      target = ref[i];
      files.push(target.path);
    }
    return files;
  };

  // ------- Exports
  module.exports.run = run;

  module.exports.phantom = phantom;

}).call(this);
